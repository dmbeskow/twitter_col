#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Dec 22 14:22:11 2017

@author: dmbeskow
"""

from twitter_col import stream_listener 
import time, json, os
import tweepy
import argparse
import re



def parse_terms(string):
    terms = string.strip('\n')
    return(terms.split(','))
            
def main():
    parser=argparse.ArgumentParser(description="Streaming Twitter API based on content")
    parser.add_argument("keys",help="JSON File with Keys" , type=str)
    parser.add_argument("search_terms",help="Search terms (up to 8) delimited by comma" , type=str)
    parser.add_argument("-tag",help="Tag that will be prepended to file names" , type=str)
    args=parser.parse_args()
    print(args)
    
    print('...')
    

    if not os.path.exists('json'):
        os.makedirs('json')
        print("Creating 'json' directory...")
    
    with open(args.keys, 'r') as infile:
        keys = json.load(infile)
    
    consumer_key = keys['consumer_key']
    consumer_secret = keys['consumer_secret']
    access_key = keys['access_token']
    access_secret = keys['access_secret']
    
    auth = tweepy.OAuthHandler(consumer_key, consumer_secret)
    auth.set_access_token(access_key, access_secret)
    
    api = tweepy.API(auth, wait_on_rate_limit=True,
    				   wait_on_rate_limit_notify=True)
    
    # Get terms to search for
    terms = parse_terms(args.search_terms)
    
    # Check if tag = None
    if args.tag is not None:
        file_prefix = args.tag
    else:
        file_prefix = [re.sub(r'\s+','-',x) for x in terms]
        file_prefix = '_'.join(file_prefix)
        
        
 
    listen = stream_listener.SListener(api, file_prefix)
    stream = tweepy.Stream(auth, listen)

    print("Streaming started...")
    

    

    
    print('Streaming the following terms:')
    for i,t in enumerate(terms):
        print('\t' + str(i + 1) + ') ' + t)
    
    if len(terms) > 8:
        exit('No more than 8 terms are allowed')
        
    
    while True:
        try: 
            stream.filter(track=terms, is_async = False, stall_warnings = True)
        except KeyboardInterrupt:
            break
        
        except Exception as e:
            print(e)
            time.sleep(60)
            continue
        

if __name__ == '__main__':
    main()
