#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Dec 22 14:22:11 2017

@author: dmbeskow
"""

from twitter_col import stream_listener 
import time, json, os
import tweepy
import argparse

def parse_terms(string):
    terms = string.strip('\n')
    return(terms.split(','))

#def parse_coords(string):
#    coords = []
#    temp = string.split(',')
#    for x in temp:
#        coords.append(float(x))
#    return(coords)
            
def main():
    parser=argparse.ArgumentParser(description="Streaming Twitter API based on geographic bounding box.  \n The keys are imported from a JSON File, and coordinates are imported from a comma separated value file")
    parser.add_argument("keys",help="JSON File with Twitter Key ('consumer_key','consumer_secret','access_token','access_secret')" , type=str)
    parser.add_argument("bbox",help="A list of longitude,latitude pairs specifying a set of bounding boxes to filter Tweets by, separated by spaces)" , nargs = 4, type=float)
    parser.add_argument("-tag",help="Tag that will be prepended to file names" , type=str)
    args=parser.parse_args()
    print(args)
    
    print('...')
    

    if not os.path.exists('json'):
        os.makedirs('json')
        print("Creating 'json' directory...")
    
    with open(args.keys, 'r') as infile:
        keys = json.load(infile)
    
    consumer_key = keys['consumer_key']
    consumer_secret = keys['consumer_secret']
    access_key = keys['access_token']
    access_secret = keys['access_secret']
    
    auth = tweepy.OAuthHandler(consumer_key, consumer_secret)
    auth.set_access_token(access_key, access_secret)
    
    api = tweepy.API(auth, wait_on_rate_limit=True,
    				   wait_on_rate_limit_notify=True)
    
    coords = args.bbox
        
    # Check if tag = None
    if args.tag is not None:
        file_prefix = args.tag
    else:
        file_prefix = '_'.join(map(str, coords)) 
 
    listen = stream_listener.SListener(api, file_prefix)
    stream = tweepy.Stream(auth, listen)

    print("Streaming started...")
    
    print('Streaming with the following geographic Bounding Box:')
    print('\tlon\tlat')
    print('1.\t ' + str(coords[0]) + '\t' + str(coords[1]))
    print('2.\t ' + str(coords[2]) + '\t' + str(coords[3]))
        
    
    while True:
        try: 
            stream.filter(locations = coords, is_async = False, stall_warnings = True)
        except KeyboardInterrupt:
            break
        
        except Exception as e:
            print(e)
            time.sleep(60)
            continue
        

if __name__ == '__main__':
    main()
